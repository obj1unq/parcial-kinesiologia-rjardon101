import kinesiologia.*

describe "group of tests" {

//**************************objetos para puntos 1 y 2*********************************/
  
    // TODO: las inicializaciones por default deben quedar definidas en la clase
    //TODO: Nunca se debe poner variables que denoten el tipo: hay que usar polimorfismo
	var magneto = new Magneto(color="blanco", esMinitramp= false)
	var bicicleta = new Bicicleta(color="blanco",esMinitramp= false)
	var minitramp = new Minitramp(color="blanco", esMinitramp= true)
	
	//un paciente común de 40 de edad, dolor=10 fortaleza=20 rutina: bicicleta, minitramp, bicicleta , magento.
	var leo = new Paciente(edad= 40 , dolor = 10, fortaleza = 20, rutina = [bicicleta, minitramp, bicicleta , magneto])
	//una paciente comun de 3 años, dolor 30, fortaleza,  50 rutina = magneto, bicicleta 
	var milena = new Paciente (edad = 3, dolor = 30, fortaleza = 50, rutina = [magneto, bicicleta])
//**************************objetos para puntos 3*********************************/
//
////3.1
//	//un paciente Resistente de 40 de edad, dolor=10 fortaleza=20 rutina: bicicleta, minitramp, bicicleta , magento.
//	//(misma configuracion para leo, pero siendo resistente)
	var nico = new Resistente (edad = 40, dolor = 10, fortaleza = 20, rutina = [bicicleta, minitramp, bicicleta , magneto])
//
////3.2	
//	//un paciente Caprichosa de 40 de edad, dolor=10 fortaleza=20 rutina: bicicleta, minitramp, bicicleta , magento.
//	//todos los aparatos son blancos 
//	//(mismo que leo)	
	var victoria  = new Caprichoso (edad = 40, dolor = 10, fortaleza = 20, rutina = [bicicleta, minitramp, bicicleta , magneto])
//	
	var bicicletaRoja  = new Bicicleta(color="rojo", esMinitramp= false)

//	//un paciente Caprichosa de 40 de edad, dolor=10 fortaleza=20 rutina: bicicleta, minitramp, bicicletaRoja , magento.
//	//todos los aparatos son blancos menos la segunda bicicleta que es roja
//	//(mismo que leo)	
	var andrea = new Caprichoso (edad = 40, dolor = 10, fortaleza = 20, rutina = [bicicleta, minitramp, bicicletaRoja , magneto])  
//	
////3.3	
//	//un paciente De Rapida Recuperacion 
//	//un paciente Resistente de 40 de edad, dolor=10 fortaleza=20 rutina: bicicleta, minitramp, bicicleta , magento.
//	//(misma configuracion para leo)
	var zoe = new Rapidarecuperacion (edad = 40, dolor =10, fortaleza = 20, rutina = [bicicleta, minitramp, bicicleta , magneto])
//
//**************************objetos para puntos 4*********************************/
	//un centro que tiene como aparatos al magneto, la bicicleta, la bicicleta roja y el minitramp
	//y como pacientes a leo, milena, nico, victoria, andrea y zoe 
	var centro = new Centro(aparatos= #{magneto, bicicleta, bicicletaRoja ,minitramp}, pacientes= #{leo, milena, nico, victoria, andrea , zoe})

	
//***********************Punto 1*************************************
	test "usar magneto leo" {
		assert.that(leo.puedeUsarAparato(magneto))	
		leo.usarAparato(magneto)
		assert.equals(9, leo.dolor())		
	} 	

	test "usar magneto milena" {
		assert.that(milena.puedeUsarAparato(magneto))	
		milena.usarAparato(magneto)
		assert.equals(27, milena.dolor())		
	}
	
	test "usar bicicleta leo" {
		assert.that(leo.puedeUsarAparato(bicicleta))	
		leo.usarAparato(bicicleta)
		assert.equals(6, leo.dolor())		
		assert.equals(23, leo.fortaleza())		
	} 	

	test "usar bicicleta milena" {
		assert.notThat(milena.puedeUsarAparato(bicicleta))		
		/*TODO: milena usa la bicicleta (cosa que no puede hacer!) */
		//TODO: checkear error
	}
	
	test "usar minitramp leo" {
		assert.that(leo.puedeUsarAparato(minitramp))		
		leo.usarAparato(minitramp)
		assert.equals(24, leo.fortaleza())		
	} 	

	test "usar minitramp milena" {
		assert.notThat(milena.puedeUsarAparato(minitramp))
		/*TODO: milena usa el minitramp (cosa que no puede hacer!) */
		//TODO: checkear error
		
	}
//***********************Punto 2*************************************
	test "sesion leo" {
		assert.that(leo.puedeHacerLaRutina())	
		leo.hacerRutina()
		assert.equals(1.8, leo.dolor()) //10 -4 -4 - 0.2 =  1.8		
		assert.equals(30, leo.fortaleza()) //20	+ 3 + 4 + 3	
	}	
	
	test "sesion milena" {
		assert.notThat(milena.puedeHacerLaRutina())
		/* milena hace la sesion (cosa que no puede hacer) */
		//TODO: checkear error
	}	

//***********************Punto 3*************************************//
	test "sesion nico (resistente)" {
		assert.that(nico.puedeHacerLaRutina())	
		nico.hacerRutina()
		assert.equals(1.8, nico.dolor()) //10 -4 -4 - 0.2 =  1.8		
		assert.equals(34, nico.fortaleza()) //20	+ 3 + 4 + 3	+ 4
	}
	
	test "sesion victoria (caprichosa sin aparato rojo)" {
		assert.notThat(victoria.puedeHacerLaRutina())	
		/* victoria hace la sesion (cosa que no puede hacer) */
	}		

	test "sesion andrea (caprichosa con aparato rojo)" {
		assert.that(andrea.puedeHacerLaRutina())	
		andrea.hacerRutina()
		assert.equals(-5.58, andrea.dolor()) 	//10 -4 -4 - 0.2 -4 -4  -(-0.62)
		assert.equals(40, andrea.fortaleza()) //20	+ 3 + 4 + 3	+ 3 + 4 + 3	  
	}		
	
	test "sesion zoe (resistente)" {

		//TODO:  Configurar para que se use el valor 1 para todos los resistentes
		
		assert.that(zoe.puedeHacerLaRutina())	
		zoe.hacerRutina()

		assert.equals(0.8, zoe.dolor()) //10 -4 -4 - 0.2 -1  =  0.8		
		assert.equals(30, zoe.fortaleza()) //20	+ 3 + 4 + 3	
	}
//***********************Punto 4*************************************
	test "colores" {
		assert.equals(#{"rojo","blanco"}, centro.coloresDeAparatos())		
	}

	test "pacientes chiquitos" {
		assert.equals(#{milena}, centro.pacientesMenores())	
	}	

	test "cuantos no pueden cumplir la sesion" {
		assert.equals(2, centro.pacientesQueNoPuedenCumplirLaSesion())	
	}	
	
}